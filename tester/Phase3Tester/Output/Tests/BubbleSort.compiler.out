const vmt_BBS
    :BBS.Start
    :BBS.Sort
    :BBS.Print
    :BBS.Init

func Main [in 0, out 0, local 3]
local[0] = $s0
local[1] = $s1
local[2] = $s2
$s0 = HeapAllocZ(12)
[$s0+0] = :vmt_BBS
if $s0 goto :null1
Error("null pointer")
null1:
$s1 = [$s0+0]
$s1 = [$s1+0]
$a0 = $s0
$a1 = 10
call $s1
$s2 = $v0
PrintIntS($s2)
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
ret

func BBS.Start [in 0, out 0, local 4]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
$s1 = $a0
$s0 = $a1
$s2 = [$s1+0]
$s2 = [$s2+12]
$a0 = $s1
$a1 = $s0
call $s2
$s3 = $v0
$s0 = [$s1+0]
$s0 = [$s0+8]
$a0 = $s1
call $s0
$s3 = $v0
PrintIntS(99999)
$s0 = [$s1+0]
$s0 = [$s0+4]
$a0 = $s1
call $s0
$s3 = $v0
$s0 = [$s1+0]
$s0 = [$s0+8]
$a0 = $s1
call $s0
$s3 = $v0
$v0 = 0
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
ret

func BBS.Sort [in 0, out 0, local 8]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
local[4] = $s4
local[5] = $s5
local[6] = $s6
local[7] = $s7
$s0 = $a0
$s1 = [$s0+8]
$s2 = Sub($s1 1)
$s1 = Sub(0 1)
while1_top:
$s3 = LtS($s1 $s2)
if0 $s3 goto :while1_end
$s3 = 1
while2_top:
$s4 = Add($s2 1)
$s5 = LtS($s3 $s4)
if0 $s5 goto :while2_end
$s4 = Sub($s3 1)
$s5 = [$s0+4]
if $s5 goto :null2
Error("null pointer")
null2:
$s6 = [$s5+0]
$s6 = Lt($s4 $s6)
if $s6 goto :bounds1
Error("array index out of bounds")
bounds1:
$s6 = MulS($s4 4)
$s6 = Add($s6 $s5)
$s4 = [$s6+4]
$s5 = [$s0+4]
if $s5 goto :null3
Error("null pointer")
null3:
$s6 = [$s5+0]
$s6 = Lt($s3 $s6)
if $s6 goto :bounds2
Error("array index out of bounds")
bounds2:
$s6 = MulS($s3 4)
$s6 = Add($s6 $s5)
$s5 = [$s6+4]
$s7 = LtS($s5 $s4)
if0 $s7 goto :if1_else
$s4 = Sub($s3 1)
$s5 = [$s0+4]
if $s5 goto :null4
Error("null pointer")
null4:
$s6 = [$s5+0]
$s6 = Lt($s4 $s6)
if $s6 goto :bounds3
Error("array index out of bounds")
bounds3:
$s6 = MulS($s4 4)
$s6 = Add($s6 $s5)
$s5 = [$s6+4]
$s7 = [$s0+4]
if $s7 goto :null5
Error("null pointer")
null5:
$s6 = [$s7+0]
$s6 = Lt($s4 $s6)
if $s6 goto :bounds4
Error("array index out of bounds")
bounds4:
$s6 = MulS($s4 4)
$s6 = Add($s6 $s7)
$s4 = [$s0+4]
if $s4 goto :null6
Error("null pointer")
null6:
$s7 = [$s4+0]
$s7 = Lt($s3 $s7)
if $s7 goto :bounds5
Error("array index out of bounds")
bounds5:
$s7 = MulS($s3 4)
$s7 = Add($s7 $s4)
$s4 = [$s7+4]
[$s6+4] = $s4
$s4 = [$s0+4]
if $s4 goto :null7
Error("null pointer")
null7:
$s6 = [$s4+0]
$s6 = Lt($s3 $s6)
if $s6 goto :bounds6
Error("array index out of bounds")
bounds6:
$s6 = MulS($s3 4)
$s6 = Add($s6 $s4)
[$s6+4] = $s5
goto :if1_end
if1_else:
$s4 = 0
if1_end:
$s3 = Add($s3 1)
goto :while2_top
while2_end:
$s2 = Sub($s2 1)
goto :while1_top
while1_end:
$v0 = 0
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
$s4 = local[4]
$s5 = local[5]
$s6 = local[6]
$s7 = local[7]
ret

func BBS.Print [in 0, out 0, local 4]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
$s0 = $a0
$s1 = 0
while3_top:
$s2 = [$s0+8]
$s3 = LtS($s1 $s2)
if0 $s3 goto :while3_end
$s2 = [$s0+4]
if $s2 goto :null8
Error("null pointer")
null8:
$s3 = [$s2+0]
$s3 = Lt($s1 $s3)
if $s3 goto :bounds7
Error("array index out of bounds")
bounds7:
$s3 = MulS($s1 4)
$s3 = Add($s3 $s2)
$s2 = [$s3+4]
PrintIntS($s2)
$s1 = Add($s1 1)
goto :while3_top
while3_end:
$v0 = 0
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
ret

func BBS.Init [in 0, out 0, local 4]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
$s2 = $a0
$s1 = $a1
[$s2+8] = $s1
$a0 = $s1
call :AllocArray
$s3 = $v0
[$s2+4] = $s3
$s0 = [$s2+4]
if $s0 goto :null9
Error("null pointer")
null9:
$s1 = [$s0+0]
$s1 = Lt(0 $s1)
if $s1 goto :bounds8
Error("array index out of bounds")
bounds8:
$s1 = MulS(0 4)
$s1 = Add($s1 $s0)
[$s1+4] = 20
$s0 = [$s2+4]
if $s0 goto :null10
Error("null pointer")
null10:
$s1 = [$s0+0]
$s1 = Lt(1 $s1)
if $s1 goto :bounds9
Error("array index out of bounds")
bounds9:
$s1 = MulS(1 4)
$s1 = Add($s1 $s0)
[$s1+4] = 7
$s0 = [$s2+4]
if $s0 goto :null11
Error("null pointer")
null11:
$s1 = [$s0+0]
$s1 = Lt(2 $s1)
if $s1 goto :bounds10
Error("array index out of bounds")
bounds10:
$s1 = MulS(2 4)
$s1 = Add($s1 $s0)
[$s1+4] = 12
$s0 = [$s2+4]
if $s0 goto :null12
Error("null pointer")
null12:
$s1 = [$s0+0]
$s1 = Lt(3 $s1)
if $s1 goto :bounds11
Error("array index out of bounds")
bounds11:
$s1 = MulS(3 4)
$s1 = Add($s1 $s0)
[$s1+4] = 18
$s0 = [$s2+4]
if $s0 goto :null13
Error("null pointer")
null13:
$s1 = [$s0+0]
$s1 = Lt(4 $s1)
if $s1 goto :bounds12
Error("array index out of bounds")
bounds12:
$s1 = MulS(4 4)
$s1 = Add($s1 $s0)
[$s1+4] = 2
$s0 = [$s2+4]
if $s0 goto :null14
Error("null pointer")
null14:
$s1 = [$s0+0]
$s1 = Lt(5 $s1)
if $s1 goto :bounds13
Error("array index out of bounds")
bounds13:
$s1 = MulS(5 4)
$s1 = Add($s1 $s0)
[$s1+4] = 11
$s0 = [$s2+4]
if $s0 goto :null15
Error("null pointer")
null15:
$s1 = [$s0+0]
$s1 = Lt(6 $s1)
if $s1 goto :bounds14
Error("array index out of bounds")
bounds14:
$s1 = MulS(6 4)
$s1 = Add($s1 $s0)
[$s1+4] = 6
$s0 = [$s2+4]
if $s0 goto :null16
Error("null pointer")
null16:
$s1 = [$s0+0]
$s1 = Lt(7 $s1)
if $s1 goto :bounds15
Error("array index out of bounds")
bounds15:
$s1 = MulS(7 4)
$s1 = Add($s1 $s0)
[$s1+4] = 9
$s0 = [$s2+4]
if $s0 goto :null17
Error("null pointer")
null17:
$s1 = [$s0+0]
$s1 = Lt(8 $s1)
if $s1 goto :bounds16
Error("array index out of bounds")
bounds16:
$s1 = MulS(8 4)
$s1 = Add($s1 $s0)
[$s1+4] = 19
$s0 = [$s2+4]
if $s0 goto :null18
Error("null pointer")
null18:
$s1 = [$s0+0]
$s1 = Lt(9 $s1)
if $s1 goto :bounds17
Error("array index out of bounds")
bounds17:
$s1 = MulS(9 4)
$s1 = Add($s1 $s0)
[$s1+4] = 5
$v0 = 0
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
ret

func AllocArray [in 0, out 0, local 3]
local[0] = $s0
local[1] = $s1
local[2] = $s2
$s0 = $a0
$s1 = MulS($s0 4)
$s1 = Add($s1 4)
$s2 = HeapAllocZ($s1)
[$s2+0] = $s0
$v0 = $s2
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
ret

